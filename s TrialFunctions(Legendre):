[1mdiff --git a/code/trial_functions.py b/code/trial_functions.py[m
[1mindex f21257d..8c8ef9c 100644[m
[1m--- a/code/trial_functions.py[m
[1m+++ b/code/trial_functions.py[m
[36m@@ -20,8 +20,7 @@[m [mclass Legendre():[m
 [m
     def _get_legendre(self, n: int):[m
         """[m
[31m-        Compute Legendre polynomials and their first and second derivatives[m
[31m-        using Bonnet's recursion formula.[m
[32m+[m[32m        Compute Legendre polynomials and their first and second derivatives using Bonnet's recursion formula.[m
         [m
         Args:[m
             n (int): Order of Legendre polynomial.[m
[36m@@ -38,7 +37,7 @@[m [mclass Legendre():[m
 [m
     def compute_legendre(self):[m
         """[m
[31m-        Update Legendre polynomials' order and their derivatives.[m
[32m+[m[32m        Update order of Legendre polynomials and their derivatives.[m
         """[m
         for order in range(self.max_order):[m
             self._get_legendre(order)[m
[36m@@ -82,9 +81,9 @@[m [mclass TrialFunctions(Legendre):[m
         Returns:[m
             str: The generated docstring.[m
         """[m
[31m-        if function_type is 'displacements' or 'section rotations':[m
[31m-            return self.TRIAL_FUNCTION_BASE_DOCSTRING.format(function_type=function_type)[m
[31m-        elif function_type == 'Airy':[m
[32m+[m[32m        if function_type in ('displacements', 'section rotations'):[m
[32m+[m[32m            return self.TRIAL_FUNCTION_BASE_DOCSTRING.format(function_type)[m
[32m+[m[32m        elif function_type is 'Airy':[m
             return self.AIRY_FUNCTION_BASE_DOCSTRING[m
         else:[m
             raise ValueError('Error: incorrect function type.')[m
[36m@@ -111,8 +110,7 @@[m [mclass TrialFunctions(Legendre):[m
         {docstring}[m
         """.format(docstring=self._generate_docstring('displacements'))[m
         if i_index and j_index:[m
[31m-            return - 2 * self.P[self.max_order] - 4 * self.x * self.dP[self.max_order] + \[m
[31m-                    (1 - self.x) * (1 + self.x) * self.d2P[self.max_order][m
[32m+[m[32m            return - 2 * self.P[self.max_order] - 4 * self.x * self.dP[self.max_order] + (1 - self.x) * (1 + self.x) * self.d2P[self.max_order][m
         elif i_index:[m
             return - 2 * self.dP[self.max_order] + (1 - self.x) * self.d2P[self.max_order][m
         elif j_index:[m
[36m@@ -154,16 +152,13 @@[m [mclass TrialFunctions(Legendre):[m
         """[m
         {docstring}[m
         """.format(docstring=self._generate_docstring('Airy'))[m
[31m-        return - 4 * self.x * (1 - self.x ** 2) * self.P[self.max_order] + \[m
[31m-                (1 - self.x ** 2) ** 2 * self.dP[self.max_order][m
[32m+[m[32m        return - 4 * self.x * (1 - self.x ** 2) * self.P[self.max_order] + (1 - self.x ** 2) ** 2 * self.dP[self.max_order][m
         [m
     def get_d2airy(self):[m
         """[m
         {docstring}[m
         """.format(docstring=self._generate_docstring('Airy'))[m
[31m-        return   4 * (3 * self.x ** 2 - 1) * self.P[self.max_order] \[m
[31m-               - 8 * self.x * (1 - self.x ** 2) * self.dP[self.max_order] + \[m
[31m-                (1 - self.x ** 2) ** 2 * self.d2P[self.max_order][m
[32m+[m[32m        return   4 * (3 * self.x ** 2 - 1) * self.P[self.max_order] - 8 * self.x * (1 - self.x ** 2) * self.dP[self.max_order] + (1 - self.x ** 2) ** 2 * self.d2P[self.max_order][m
     [m
     def get_nu(self, bc_in_plane):[m
         """[m
[1mdiff --git a/junk/test_trial_functions.py b/junk/test_trial_functions.py[m
[1mindex a364346..3f306fb 100644[m
[1m--- a/junk/test_trial_functions.py[m
[1m+++ b/junk/test_trial_functions.py[m
[36m@@ -1,7 +1,7 @@[m
 import sys[m
 import matplotlib.pyplot as plt[m
 [m
[31m-sys.path.append("/hpc/ac48390/git/nonlinear_vibrations/code")[m
[32m+[m[32msys.path.append("/mnt/c/Users/JORGE/Desktop/Coding/git/nonlinear_vibrations/code")[m
 from plate import *[m
 from trial_functions import *[m
 [m
[36m@@ -53,7 +53,7 @@[m [mplt.rcParams["font.size"] = 25.0[m
 for i in range(N + 1):[m
     trial = TrialFunctions(x_values, i)[m
     legendre_0 = trial.compute_legendre().P[i][m
[31m-    trial_x = trial.get_x(i1, j1)[m
[32m+[m[32m    trial_x = trial.get_dx(i1, j1)[m
     trial_nu = trial.get_nu(bc_ip)[m
     # print(legendre_0)[m
     # plt.plot(x_values, legendre_0, label=fr'$P_{i}$', linewidth=3.0)[m
